package com.eomcs.basic.ex05;

//# 비트 연산자 & 를 이용하여 % 연산 구현하기
//
public class Exam0351 {
  public static void main(String[] args) {
    
    
    System.out.println(57 % 2);  
    System.out.println(57 & 0b0000_0001);
    //%연산은 나누기 연산을 수행해야한다
    //나누기 연산은 여러번의 계산 작업을 수행하게된다
    //그에비해 &비트연산는 한번만 하면된다
    //결론 :짝수인지홀수인지 또는 이후의 나머지르 구하고 싶다면 짝수인지 홀수인지 알아내거나 
    //2의 나머지를 구학싶다면 &비트연산을 수행하는것이 빠르다
    // 어떤 값에 대해 2로 나눈 나머지 값을 구하고 싶다면,
    // & 연산자를 이용하여 그 값의 하위 1비트 값만 추출하면 된다. 
    // 예)
    //0011 0110 (54)
    // &  0000 0001(뒤에 1비트의 값을 추출)
    //---------------
    //0000 0000(나머지가 업ㄳ다
    //
    
    
    //  0011 0101(53)
    //& 0000 0011
    // ----------------------
      //0000 0001 나머지가 1이다
    
    System.out.println(57 % 4);
    System.out.println(57 & 0b11);
    // 어떤 값에 대해 4로 나눈 나머지 값을 구하고 싶다면,
    // & 연산자를 이용하여 그 값의 하위 2비트 값만 추출하면 된다.
    //주의 &연산자를 사용해소 나머지값을 구하려면 
    //나누는값이 2의 제곱수 여야한다
    //즉 2의 제곱수로 나머지값을 구하눈 경우에는
    //%대신 비트연산자 & 를 사용하면 계산속도가 빠르다
    // 권고 
    //너무 고민 말고 그냥 %사용해라
    //그럼에도 불구하고 이연산자의 응용법을 익히는 이유는 가끔 오픈소스나 고급 개발자의 
    //코드에서 이런코드를 만나기때문이다
    
    
    System.out.println(57 % 8);
    System.out.println(57 & 0b111);
    
    System.out.println(57 % 16);
    System.out.println(57 & 0b1111);
    
    
    
    
  }
}

